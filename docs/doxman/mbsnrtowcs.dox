/*!
  \page mbsnrtowcs mbsnrtowcs manual

    __mbsnrtowcs - `convert a multibyte string to a wide-character string`__

    The  mbsnrtowcs()  function  is  like the mbsrtowcs(3) function, except
    that the number of bytes to be converted, starting at `*src`, is  limited
    to at most nms bytes.

    If dest is not `NULL`, the mbsnrtowcs() function converts at most `nms`
    bytes from the multibyte string `*src` to a wide-character string  starting
    at `dest`.  
    At  most len wide characters are written to dest.  
    The shift state `*ps` is updated.


    The conversion is effectively performed by repeatedly calling:

    \code{.c}


           mbrtowc(dest, *src, n, ps)

    \endcode

    where `n` is some positive number, as long as this call succeeds, and then
    incrementing `dest`  by one and `*src` by the number of bytes consumed.  
    The conversion can stop for three reasons:

    1. An invalid multibyte sequence has been encountered.  In  this  case,
          `*src` is left pointing to the invalid multibyte sequence, `(size_t) -1`
          is returned, and `errno` is set to `EILSEQ`.

    2. The nms limit forces a stop, or len non `L`'\0' wide characters  have
        been  stored  at  `dest`.  
        In this case, *src is left pointing to the
        next multibyte sequence to be converted,  and  the  number  of  wide
        characters written to `dest` is returned.

    3. The  multibyte  string  has been completely converted, including the
        terminating null wide character `L`'\0', which has the side effect of
        bringing back `*ps` to the initial state.  
        In this case, `*src` is set to `NULL`, and the number of wide characters written to `dest`,
        excluding the terminating null wide character, is returned.

    According to `POSIX.1`, if the input buffer ends with an incomplete character,
    it is unspecified whether conversion stops at  the  end  of  the previous  character,
    if any, or at the end of the input buffer.  
    The glibc implementation adopts the former behavior.

    If `dest` is `NULL`, `len` is ignored, and the conversion proceeds as  above,
    except  that  the converted wide characters are not written out to memory,
    and that no destination length limit exists.

    In both of the above cases, if `ps` is `NULL`, a  static anonymous state
    known only to the mbsnrtowcs() function is used instead.

    The  programmer  must  ensure  that there is room for at least len wide characters at dest.


    # Return Value

    The mbsnrtowcs() function returns the number of  wide  characters  that
    make  up the converted part of the wide-character string, not including
    the terminating null wide character.  
    If an invalid multibyte sequence was encountered, `(size_t) -1` is returned,
    and errno set to `EILSEQ`.


    # Notes

    The behavior of mbsnrtowcs() depends on the `LC_CTYPE` category of the current locale.  
    Passing `NULL` as `ps` is not multithread safe.


    # See example

    \see https://github.com/ClnViewer/LibWchar2/blob/master/test/test_mbsnrtowcs.c



    \includedoc docs/man-license.dox

*/
